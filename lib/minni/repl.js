// Generated by CoffeeScript 1.3.1
(function() {
  var Minni, REPL_PROMPT, autocomplete, error, pipedInput, readline, repl, run, stdin, stdout;

  stdin = process.openStdin();

  stdout = process.stdout;

  Minni = require('./minni');

  readline = require('readline');

  REPL_PROMPT = 'minni> ';

  error = function(err) {
    return stdout.wite((err.stack || err.toString()) + '\n');
  };

  process.on('uncaughtException', error);

  autocomplete = function(text) {
    return [[], text];
  };

  run = function(buffer) {
    buffer = buffer.replace(/[\r\n]+$/, "");
    if (!buffer.toString().trim()) {
      repl.prompt();
      return;
    }
    if (buffer === 'quit') {
      repl.close();
      return;
    }
    repl.setPrompt(REPL_PROMPT);
    Minni.exec(buffer);
    return repl.prompt();
  };

  if (stdin.readable && stdin.isRaw) {
    pipedInput = '';
    repl = {
      prompt: function() {
        return stdout.write(this._prompt);
      },
      setPrompt: function(p) {
        return this._prompt = p;
      },
      input: stdin,
      output: stdout,
      on: function() {}
    };
    stdin.on('data', function(chunk) {
      var line, lines, _i, _len, _ref;
      pipedInput += chunk;
      if (!/\n/.test(pipedInput)) {
        return;
      }
      lines = pipedInput.split("\n");
      pipedInput = lines[lines.length - 1];
      _ref = lines.slice(0, -1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (!(line)) {
          continue;
        }
        stdout.write("" + line + "\n");
        run(line);
      }
    });
    stdin.on('end', function() {
      var line, _i, _len, _ref;
      _ref = pipedInput.trim().split("\n");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (!(line)) {
          continue;
        }
        stdout.write("" + line + "\n");
        run(line);
      }
      stdout.write('\n');
      return process.exit(0);
    });
  } else {
    if (readline.createInterface.length < 3) {
      repl = readline.createInterface(stdin, autocomplete);
      stdin.on('data', function(buffer) {
        return repl.write(buffer);
      });
    } else {
      repl = readline.createInterface(stdin, stdout, autocomplete);
    }
  }

  repl.on('close', function() {
    repl.output.write('\n\n');
    repl.output.write('Bye, have a nice day!\n\n');
    return repl.input.destroy();
  });

  repl.on('line', run);

  repl.setPrompt(REPL_PROMPT);

  repl.prompt();

}).call(this);

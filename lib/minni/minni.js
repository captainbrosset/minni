// Generated by CoffeeScript 1.3.1
(function() {
  var Item, List, Todo, fs,
    __slice = [].slice;

  fs = require('fs');

  List = require('./list');

  Item = require('./item');

  exports.VERSION = '0.0.1';

  Todo = Todo = (function() {

    Todo.name = 'Todo';

    function Todo(file) {
      this.file = file;
      this.load();
    }

    Todo.prototype.load = function() {
      var item, items, lines, task, _i, _len, _ref, _ref1, _results;
      lines = fs.readFileSync(this.file, 'utf8');
      _ref = lines.split(Todo.TASKS_SEP), this.name = _ref[0], items = _ref[1];
      this.name = this.name.replace(/[\r\n]+$/, '');
      this.todo = new List();
      this.done = new List();
      _ref1 = items.split('\n');
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        if (!(item !== '')) {
          continue;
        }
        task = new Item(item);
        if (task.is_done()) {
          _results.push(this.done.add(task));
        } else {
          _results.push(this.todo.add(task));
        }
      }
      return _results;
    };

    Todo.prototype.save = function() {
      return fs.writeFileSync(this.file, this.get_content(), 'utf8');
    };

    Todo.prototype.reload = function() {
      this.load();
      return "Tasks list reloaded".green;
    };

    Todo.prototype.get_name = function() {
      return this.name;
    };

    Todo.prototype.get_content = function() {
      return "" + this.name + "\n" + Todo.TASKS_SEP + "\n" + (this.todo.toFile()) + "\n" + (this.done.toFile());
    };

    Todo.prototype.process_command = function(buffer) {
      var action, args, result, _ref;
      _ref = buffer.split(" "), action = _ref[0], args = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
      args = args.join(" ");
      result = (function() {
        switch (action) {
          case "reload":
          case "R":
            return this.reload();
          case "help":
          case "h":
            return Todo.help;
          case "add":
          case "a":
            return this.add_item(args);
          case "remove":
          case "r":
            return this.remove_item(args);
          case "list":
          case "l":
            return this.list_items();
          case "listall":
          case "la":
            return this.list_all_items();
          case "done":
          case "d":
            return this.mark_as_done(args);
          case "rename":
          case "ren":
            return this.rename(args);
          case "tag":
          case "t":
            return this.tag(args);
          case "prio":
          case "p":
            return this.priority(args);
          default:
            return this.send_response('');
        }
      }).call(this);
      return this.send_response(result);
    };

    Todo.prototype.mark_as_done = function(index) {
      var task;
      index = parseInt(index, 10) - 1;
      task = this.todo.get(index);
      task.mark_as_done();
      this.todo.removeAt(index);
      this.done.add(task);
      this.save();
      return "Task sucessfully marked as done".grey;
    };

    Todo.prototype.remove_item = function(index) {
      index = parseInt(index, 10) - 1;
      this.todo.remove(index);
      this.save();
      return "Task sucessfully deleted".grey;
    };

    Todo.prototype.add_item = function(item_name) {
      this.todo.add(item_name);
      this.save();
      return "New task sucessfully created".grey;
    };

    Todo.prototype.list_all_items = function() {
      var result;
      result = "Ongoing\n".bold;
      result += this.list_items();
      result += "\nDone\n".bold;
      result += this.done.toString();
      return result;
    };

    Todo.prototype.list_items = function() {
      return this.todo.toString();
    };

    Todo.prototype.rename = function(new_name) {
      var old;
      old = this.name;
      this.name = new_name;
      this.save();
      return "'" + old + "' has been renamed to '" + this.name + "'";
    };

    Todo.prototype.tag = function(args) {
      var index, tag, tags, task, _i, _len, _ref;
      _ref = args.split(" "), index = _ref[0], tags = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
      index = parseInt(index, 10) - 1;
      task = this.todo.get(index);
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        tag = tags[_i];
        task.add_tag(tag);
      }
      this.save();
      return "" + tags.length + " Tag(s) successfully added";
    };

    Todo.prototype.priority = function(args) {
      var index, prio, task, trash, _ref;
      _ref = args.split(" "), index = _ref[0], prio = _ref[1], trash = 3 <= _ref.length ? __slice.call(_ref, 2) : [];
      index = parseInt(index, 10) - 1;
      prio = parseInt(prio, 10);
      task = this.todo.get(index);
      task.set_priority(prio);
      this.todo.sort_by_prio();
      this.save();
      return "Priority successfully updated";
    };

    Todo.prototype.send_response = function() {
      var text;
      text = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      text = text.join(' ');
      if (text.slice(-1) !== '\n' && text !== '') {
        return text + '\n';
      }
      return text;
    };

    return Todo;

  })();

  module.exports = Todo;

  Todo.TASKS_SEP = '================================================================================';

  Todo.LIST_SEP = '--------------------------------------------------------------------------------';

  Todo.help = ["", "Minni - Minimalistic Command Line Todo List", "  Usage:", "  help, h".bold, "\tDisplays this help content", "  add, a".bold, "\tAdd a task to the list", "  remane, r".bold, "\tRenames the list", "  list, l".bold, "\tDisplays all tasks", ""].join('\n');

}).call(this);

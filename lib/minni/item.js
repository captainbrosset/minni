// Generated by CoffeeScript 1.3.1
(function() {
  var Item, dateFormat,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  dateFormat = require('dateformat');

  Item = (function() {

    Item.name = 'Item';

    function Item(text) {
      this.task = '';
      this.priority = 0;
      this.done = false;
      this.tags = [];
      this.parse(text);
    }

    Item.prototype.parse = function(text) {
      var split, status, task, _i, _len, _ref, _results;
      _ref = text.slice(3).split(' '), status = _ref[0], task = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
      _results = [];
      for (_i = 0, _len = task.length; _i < _len; _i++) {
        split = task[_i];
        switch (split[0]) {
          case '(':
            _results.push(this.priority = parseInt(split.slice(1), 10));
            break;
          case '#':
            _results.push(this.done = split.slice(1));
            break;
          case '+':
            _results.push(this.add_tag(split.slice(1)));
            break;
          default:
            if (this.task.length > 0) {
              this.task += ' ';
            }
            _results.push(this.task += split);
        }
      }
      return _results;
    };

    Item.prototype.is_done = function() {
      return this.done;
    };

    Item.prototype.mark_as_done = function() {
      this.done = dateFormat(new Date(), "yyyy-mm-dd");
      return this.priority = 0;
    };

    Item.prototype.add_tag = function(tag) {
      tag = tag.split(" ").join("-");
      if (__indexOf.call(this.tags, tag) >= 0) {
        return;
      }
      return this.tags.push(tag);
    };

    Item.prototype.set_priority = function(priority) {
      this.priority = priority != null ? priority : 0;
    };

    Item.prototype.toFile = function() {
      var str, tag, _i, _len, _ref;
      str = this.done ? "[x]" : "[ ]";
      if (this.priority > 0) {
        str += " (" + this.priority + ")";
      }
      str += " " + this.task + " ";
      if (this.done !== false) {
        str += " #" + this.done + " ";
      }
      if (this.tags.length > 0) {
        _ref = this.tags;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          str += " +" + tag;
        }
      }
      return str;
    };

    Item.prototype.toString = function() {
      var str, tag, _i, _len, _ref;
      str = '';
      str += "" + this.task + " ";
      if (this.done !== false) {
        str += (" #" + this.done + " ").green;
      }
      if (this.tags.length > 0) {
        _ref = this.tags;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          str += (" +" + tag).cyan;
        }
      }
      if (this.priority === 1) {
        return str.yellow;
      }
      if (this.priority === 2) {
        return str.yellow.bold;
      }
      if (this.priority === 3) {
        return str.red;
      }
      if (this.priority === 4) {
        return str.red.bold;
      }
      return str;
    };

    return Item;

  })();

  module.exports = Item;

}).call(this);
